from aiogram import types
from loader import dp, db, cursor
from keyboards import mainMenu, subMenu, osAdminMenu, netMenu, orderMenu, netEquipment
from data.config import admins_id
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import random

order_d = []
job_n_d = []
job_d = []


class FSMorders(StatesGroup):
    job_name = State()
    job_description = State()


@dp.message_handler(text="/start")
async def command_call_main_menu(message: types.Message):
    cursor.execute(f"SELECT * FROM users WHERE user_id = {message.chat.id}")
    a_u = cursor.fetchone()
    print(a_u)
    if a_u == 1:
        for admin_id in admins_id:
            if str(admin_id) == str(message.from_user.id):
                admin_s = "1"
                sql_user_reg = "INSERT INTO users (user_id, f_name, l_name, user_status, date ,admin_status) " \
                               "VALUES (%s, %s, %s, %s, %s, %s)"
                val_user_reg = (message.from_user.id, message.from_user.first_name, message.from_user.last_name, '1',
                                message.date, admin_s,)
                cursor.execute(sql_user_reg, val_user_reg)
                db.commit()
                await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω: {message.from_user.full_name}", reply_markup=mainMenu)
            elif str(admin_id) != str(message.from_user.id):
                sql_user_reg = "INSERT INTO users (user_id, f_name, l_name, user_status, date ,admin_status) " \
                               "VALUES (%s, %s, %s, %s, %s, %s)"
                val_user_reg = (message.from_user.id, message.from_user.first_name, message.from_user.last_name, '1',
                                message.date, admin_s,)
                cursor.execute(sql_user_reg, val_user_reg)
                db.commit()
                await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: {message.from_user.full_name}", reply_markup=mainMenu)
    else:
        cursor.execute(f"SELECT * FROM users WHERE user_id = {message.chat.id}")
        a_u_s = cursor.fetchone()[-1]
        print(a_u_s)
        if a_u_s == 1:
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω: {message.from_user.full_name}", reply_markup=mainMenu)
        else:
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å: {message.from_user.full_name}", reply_markup=mainMenu)


# --- Main Menu ---
@dp.message_handler(text=["–£—Å–ª—É–≥–∏ üè∑", "–¢–æ–≤–∞—Ä—ã üí≤", "–ö–æ—Ä–∑–∏–Ω–∞ üìå", '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def main_menu(message: types.Message):
    if message.text == "–£—Å–ª—É–≥–∏ üè∑":
        await message.answer(f"{message.from_user.full_name},\n –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª:\n {message.text}\n"
                             f" –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ", reply_markup=subMenu)
    elif message.text == "–¢–æ–≤–∞—Ä—ã üí≤":
        await message.answer(f"{message.from_user.full_name},\n –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª:\n {message.text}",
                             reply_markup=netEquipment)
    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üìå":
        cursor.execute(f"SELECT * FROM orders WHERE client_id = {message.chat.id}")
        all_orders = cursor.fetchall()
        db.commit()
        # print(all_orders)
        if len(all_orders) == 0:
            await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤!")
        else:
            for cl_order in all_orders:
                o_n = str(cl_order[1])
                j_n = cl_order[2]
                j_d = cl_order[3]
                j_s = cl_order[4]
                j_date = cl_order[6]
                # print(all_orders)
                await message.answer(f"{message.from_user.full_name}\n –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {o_n}"
                                     f"\n –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {j_n}\n –û–ø–∏—Å–∞–Ω–∏–µ: {j_d}\n"
                                     f" –°—Ç–∞—Ç—É—Å: {j_s}\n –î–∞—Ç–∞: {j_date}")

    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer(f"{message.text}", reply_markup=mainMenu)


# --- Sub Menu ---
@dp.message_handler(text=['–ù—Å—Ç—Ä–æ–π–∫–∞ OS Linux/Windows/MacOS', '–ù—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', "–ù–∞–∑–∞–¥"])
async def sub_menu(message: types.Message):
    if message.text == '–ù—Å—Ç—Ä–æ–π–∫–∞ OS Linux/Windows/MacOS':
        await message.answer(f"{message.from_user.full_name},\n –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª:\n {message.text}\n"
                             f" –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ", reply_markup=osAdminMenu)
    elif message.text == '–ù—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è':
        await message.answer(f"{message.from_user.full_name},\n –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª:\n {message.text}",
                             reply_markup=netMenu)
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer(f"{message.text}", reply_markup=subMenu)


# --- network order ---
@dp.message_handler(text=['–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä(—ã)', '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä(—ã)', '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä(—ã)/–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä(—ã)/–¢–æ—á–∫–∞ WiFi',
                          '–¢–æ—á–∫–∞ WiFi'], state=None)
async def net_job(message: types.Message):
    await FSMorders.job_name.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ë—Ä–µ–Ω–¥(—ã) –∏ –º–æ–¥–µ–ª—å(–∏) –æ–±—Ä—É–¥–æ–≤–∞–Ω–∏—è", reply_markup=orderMenu)


# ---OS order ---
@dp.message_handler(text=['Linux', 'Windows', 'MacOS'], state=None)
async def os_job(message: types.Message):
    await FSMorders.job_name.set()
    await message.answer(f"–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ {message.text}", reply_markup=orderMenu)


# --- FSM start ---
@dp.message_handler(state=FSMorders.job_name)
async def job_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['job_name'] = message.text
    await FSMorders.next()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")


# --- Order cancel ---
@dp.message_handler(state="*", commands='–û—Ç–º–µ–Ω–∏—Ç—å –ó–∞–∫–∞–∑')
@dp.message_handler(state="*", text='–û—Ç–º–µ–Ω–∏—Ç—å –ó–∞–∫–∞–∑')
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        # return
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=mainMenu)
        await state.finish()


@dp.message_handler(state=FSMorders.job_description)
async def job_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['job_description'] = message.text
    await message.answer(message.text)
    async with state.proxy() as data:
        order_number = random.randint(1000, 999999999)

        await message.answer(f"{message.chat.full_name}\n –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n {order_number}\n –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n"
                             f" {list(data.values())[0]} \n –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n {list(data.values())[1]}"
                             f"\n –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –û—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑")

        ins1 = str(list(data.values())[0])
        ins2 = str(list(data.values())[1])
        # print(ins1)
        # print(ins2)

        order_d.append(order_number)
        job_n_d.append(ins1)
        job_d.append(ins2)
        await state.finish()


@dp.message_handler(text=['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', '–û—Ç–º–µ–Ω–∏—Ç—å –ó–∞–∫–∞–∑'])
async def save_to_bd(message: types.Message):
    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑':
        print(order_d, job_n_d, job_d)
        sql_order_reg = "INSERT INTO orders (order_number, job_name, job_description, status, client_id, " \
                        "order_date) VALUES (%s, %s, %s, %s, %s, %s)"
        val_order_reg = (order_d[0], job_n_d[0], job_d[0], '0', message.from_user.id, message.date)
        cursor.execute(sql_order_reg, val_order_reg)
        db.commit()
        order_d.clear()
        job_n_d.clear()
        job_d.clear()
        await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É', reply_markup=mainMenu)
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ó–∞–∫–∞–∑':
        order_d.clear()
        job_n_d.clear()
        job_d.clear()
        await message.answer('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=mainMenu)
